name: Build and Sign APK with Cordova

on:
  workflow_dispatch:
    inputs:
      html:
        description: 'Contenido HTML con CSS y JS embebidos'
        required: true
        type: string
      app_name:
        description: 'Nombre de la aplicación'
        required: false
        default: 'MiAplicacion'
        type: string
      package_name:
        description: 'Nombre del paquete'
        required: false
        default: 'com.example.miaplicacion'
        type: string
      android_target:
        description: 'Versión del SDK objetivo de Android'
        required: false
        default: '33'
        type: string

env:
  NODE_VERSION: '20.11.1'
  JAVA_VERSION: '17.0.10'
  ANDROID_SDK_VERSION: '33'
  GRADLE_VERSION: '8.0.2'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configurar el SDK de Android
        uses: android-actions/setup-android@v3
        with:
          android-sdk: ${{ env.ANDROID_SDK_VERSION }}
          accept-licenses: true

      - name: Instalar la plataforma del SDK de Android
        run: |
          echo "Instalando la plataforma del SDK de Android (android-${{ env.ANDROID_SDK_VERSION }})..."
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "platforms;android-${{ env.ANDROID_SDK_VERSION }}"
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Instalar Gradle
        run: |
          wget https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-bin.zip
          unzip gradle-${{ env.GRADLE_VERSION }}-bin.zip
          export PATH=$PATH:$PWD/gradle-${{ env.GRADLE_VERSION }}/bin
          gradle --version

      - name: Instalar Cordova y dependencias globales
        run: |
          npm install -g cordova@latest native-run@latest cordova-res@latest
          cordova --version

      - name: Preparar proyecto Cordova
        run: |
          # Crear el proyecto Cordova
          cordova create "${{ github.event.inputs.app_name || 'MiAplicacion' }}" \
            "${{ github.event.inputs.package_name || 'com.example.miaplicacion' }}" \
            "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          
          # Cambiar al directorio del proyecto
          cd "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          
          # Agregar plataforma Android con verbose
          echo "Agregando plataforma Android..."
          cordova platform add android@latest --verbose
          
          # Verificar la estructura del directorio
          echo "Contenido del directorio platforms/android:"
          ls -la platforms/android/

      - name: Configurar Gradle
        run: |
          cd "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          
          # Crear directorio gradle si no existe
          mkdir -p platforms/android/gradle/wrapper
          
          # Crear gradle-wrapper.properties si no existe
          if [ ! -f platforms/android/gradle/wrapper/gradle-wrapper.properties ]; then
            echo "Creando gradle-wrapper.properties..."
            echo "distributionUrl=https\://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-bin.zip" > platforms/android/gradle/wrapper/gradle-wrapper.properties
          fi
          
          # Crear build.gradle si no existe
          if [ ! -f platforms/android/build.gradle ]; then
            echo "Creando build.gradle..."
            cat <<EOL > platforms/android/build.gradle
plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion ${{ env.ANDROID_SDK_VERSION }}
    defaultConfig {
        applicationId "${{ github.event.inputs.package_name || 'com.example.miaplicacion' }}"
        minSdkVersion 16
        targetSdkVersion ${{ env.ANDROID_SDK_VERSION }}
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
}
EOL
          fi
          
          # Generar gradlew si no existe
          if [ ! -f platforms/android/gradlew ]; then
            echo "Generando gradlew..."
            cd platforms/android
            gradle wrapper
            cd ../..
          fi
          
          # Dar permisos de ejecución a gradlew
          chmod +x platforms/android/gradlew

      - name: Construir APK
        run: |
          cd "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          # Mostrar versión de gradle
          ./platforms/android/gradlew --version
          
          # Limpiar y construir
          ./platforms/android/gradlew clean --stacktrace
          cordova build android --release --verbose -- --stacktrace
        env:
          JAVA_OPTS: '-Xmx4g'

      - name: Configurar keystore
        run: |
          cd "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          if [ -z "${{ secrets.KEYSTORE }}" ]; then
            echo "Error: El secreto KEYSTORE no está configurado"
            exit 1
          fi
          echo "${{ secrets.KEYSTORE }}" | base64 -d > my-release-key.jks
          if [ ! -f my-release-key.jks ]; then
            echo "Error: No se pudo crear el archivo keystore"
            exit 1
          fi

      - name: Firmar y alinear APK
        run: |
          cd "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          APK_PATH=$(find platforms/android/app/build/outputs/apk/release -name "*.apk" -type f | head -n 1)
          
          if [ -z "$APK_PATH" ]; then
            echo "Error: No se encontró el APK"
            exit 1
          fi
          
          echo "APK encontrado en: $APK_PATH"
          
          # Firmar APK
          jarsigner -verbose \
            -sigalg SHA256withRSA \
            -digestalg SHA-256 \
            -keystore my-release-key.jks \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" \
            "$APK_PATH" \
            "${{ secrets.KEY_ALIAS || 'alias_name' }}"
          
          # Alinear y verificar
          SIGNED_APK="app-release-signed.apk"
          ${ANDROID_HOME}/build-tools/30.0.3/zipalign -v 4 "$APK_PATH" "$SIGNED_APK"
          ${ANDROID_HOME}/build-tools/30.0.3/apksigner verify --verbose "$SIGNED_APK"

      - name: Subir APK firmada
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk
          path: ${{ github.event.inputs.app_name || 'MiAplicacion' }}/app-release-signed.apk
          retention-days: 7
