name: Build and Sign APK with Cordova

on:
  workflow_dispatch:
    inputs:
      html:
        description: 'Contenido HTML con CSS y JS embebidos'
        required: true
        type: string
      app_name:
        description: 'Nombre de la aplicación'
        required: false
        default: 'MiAplicacion'
        type: string
      package_name:
        description: 'Nombre del paquete'
        required: false
        default: 'com.example.miaplicacion'
        type: string
      android_target:
        description: 'Versión del SDK objetivo de Android'
        required: false
        default: '33'
        type: string

env:
  NODE_VERSION: '20.11.1'
  JAVA_VERSION: '17.0.10'
  ANDROID_SDK_VERSION: '33'
  GRADLE_VERSION: '8.0.2'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configurar el SDK de Android
        uses: android-actions/setup-android@v3
        with:
          android-sdk: ${{ env.ANDROID_SDK_VERSION }}
          accept-licenses: true

      - name: Instalar la plataforma del SDK de Android
        run: |
          echo "Instalando la plataforma del SDK de Android (android-${{ env.ANDROID_SDK_VERSION }})..."
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "platforms;android-${{ env.ANDROID_SDK_VERSION }}"

      - name: Instalar Cordova y dependencias globales
        run: |
          npm install -g cordova@latest native-run@latest cordova-res@latest
          cordova --version

      - name: Crear proyecto Cordova
        run: |
          cordova create "${{ github.event.inputs.app_name || 'MiAplicacion' }}" \
            "${{ github.event.inputs.package_name || 'com.example.miaplicacion' }}" \
            "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          cd "${{ github.event.inputs.app_name || 'MiAplicacion' }}"
          cordova platform add android@latest
          cordova requirements

      - name: Configurar ajustes del proyecto
        working-directory: ${{ github.event.inputs.app_name || 'MiAplicacion' }}
        run: |
          # Actualizar config.xml
          sed -i "s/<platform name=\"android\">/<platform name=\"android\">\n        <preference name=\"android-targetSdkVersion\" value=\"${{ github.event.inputs.android_target }}\"\/>/g" config.xml
          sed -i "/<platform name=\"android\">/a \        <preference name=\"AndroidXEnabled\" value=\"true\"\/>" config.xml

          # Crear archivo gradle-wrapper.properties si no existe
          if [ ! -f platforms/android/gradle/wrapper/gradle-wrapper.properties ]; then
            mkdir -p platforms/android/gradle/wrapper
            cat <<EOF > platforms/android/gradle/wrapper/gradle-wrapper.properties
distributionUrl=https\://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-bin.zip
EOF
          fi

      - name: Otorgar permisos de ejecución a gradlew
        working-directory: ${{ github.event.inputs.app_name || 'MiAplicacion' }}/platforms/android
        run: |
          chmod +x gradlew

      - name: Limpiar proyecto (con modo de depuración)
        working-directory: ${{ github.event.inputs.app_name || 'MiAplicacion' }}/platforms/android
        run: |
          ./gradlew clean --stacktrace

      - name: Construir APK (con modo de depuración)
        working-directory: ${{ github.event.inputs.app_name || 'MiAplicacion' }}
        run: |
          cordova build android --release --verbose -- --stacktrace
        env:
          JAVA_OPTS: '-Xmx4g'

      - name: Configurar keystore
        run: |
          if [ -z "${{ secrets.KEYSTORE }}" ]; then
            echo "Error: El secreto KEYSTORE no está configurado"
            exit 1
          fi
          echo "${{ secrets.KEYSTORE }}" | base64 -d > my-release-key.jks
          if [ ! -f my-release-key.jks ]; then
            echo "Error: No se pudo crear el archivo keystore"
            exit 1
          fi

      - name: Firmar y alinear APK
        run: |
          APK_PATH=$(find ${{ github.event.inputs.app_name || 'MiAplicacion' }}/platforms/android/app/build/outputs/apk/release -name "*.apk" -type f | head -n 1)
          
          if [ -z "$APK_PATH" ]; then
            echo "Error: No se encontró el APK"
            exit 1
          fi
          
          echo "APK encontrado en: $APK_PATH"
          
          jarsigner -verbose \
            -sigalg SHA256withRSA \
            -digestalg SHA-256 \
            -keystore my-release-key.jks \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" \
            "$APK_PATH" \
            "${{ secrets.KEY_ALIAS || 'alias_name' }}"
          
          SIGNED_APK="app-release-signed.apk"
          ${ANDROID_HOME}/build-tools/$(ls ${ANDROID_HOME}/build-tools | sort -V | tail -1)/zipalign -v 4 "$APK_PATH" "$SIGNED_APK"
          ${ANDROID_HOME}/build-tools/$(ls ${ANDROID_HOME}/build-tools | sort -V | tail -1)/apksigner verify --verbose "$SIGNED_APK"

      - name: Subir APK firmada
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk
          path: app-release-signed.apk
          retention-days: 7
